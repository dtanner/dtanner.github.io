<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Witty Ginger</title>
    <link>http://wittyginger.com/index.xml</link>
    <description>Recent content on The Witty Ginger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Aug 2017 13:09:00 +0000</lastBuildDate>
    <atom:link href="http://wittyginger.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mountain Bike Frame Hydration Hack</title>
      <link>http://wittyginger.com/post/frame-hydration/</link>
      <pubDate>Fri, 11 Aug 2017 13:09:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/frame-hydration/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been carrying water on my frame using a custom solution the last couple seasons.
It&amp;rsquo;s worked really well, so thought I&amp;rsquo;d share the details in case anyone else is interested.
If you know of an existing commercial solution that does all this, let me know and I&amp;rsquo;ll update the post.&lt;/p&gt;

&lt;h1 id=&#34;where-this-works-well&#34;&gt;Where This Works Well&lt;/h1&gt;

&lt;p&gt;The target audience is people that want to carry up to 70 oz of water on trails, but don&amp;rsquo;t want to use a backpack.
70 oz is perfect for most rides up to a few hours.
Backpacks aren&amp;rsquo;t ideal because they&amp;rsquo;re heavy and sweaty.
Bottles on a rough trail are terrible because it&amp;rsquo;s a great way to crash.  A couple bottles can only carry at most 50 oz anyway.&lt;br /&gt;
This solution also presumes your frame can fit a pack.
In this example I&amp;rsquo;m using a hardtail, but many full suspension bikes can use a similar solution.&lt;/p&gt;

&lt;h1 id=&#34;parts&#34;&gt;Parts&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://banjobrothers.com/products/current/frame-packs/frame-pack-medium/&#34;&gt;Banjo Brothers Medium Frame Pack&lt;/a&gt; - $35. Or use whatever frame pack you like.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.platy.com/catalog/product/view/id/16837/s/hoser/category/45&#34;&gt;Platypus Hoser Hydration System - 2 Liter&lt;/a&gt; - $25. When full it just barely fits in the medium frame pack.
The key to this bladder is that it has a small cap. A &lt;a href=&#34;http://wittyginger.com/hydration/camelbak-bladder-annot.jpg&#34;&gt;CamelBak bladder&lt;/a&gt; won&amp;rsquo;t fit in this pack because of its giant cap.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Camelbak-Quick-LinkTM-Conversion-Kit/dp/B006IB9TSE&#34;&gt;CambelBak Quick Link Conversion Kit&lt;/a&gt; - $10. Lets you easily remove the bladder and leave the hose in place.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Retractable-Carabiner-Keychain-Fishing-Translucent/dp/B01EIQXG66&#34;&gt;Retractable Badge Holder&lt;/a&gt; - $10 for 4, or free if your employer will give you one. They last about a season.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rei.com/product/637547/camelbak-big-bite-valve&#34;&gt;CamelBak Big Bite Valve&lt;/a&gt; - $6. The flow of the &lt;a href=&#34;http://wittyginger.com/hydration/platypus-bite-valve-annot.jpg&#34;&gt;Platypus bite valve&lt;/a&gt; that comes with the kit is ridiculously slow. Maybe they&amp;rsquo;ve improved it since I bought one, but the CamelBak valve works great.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;steps&#34;&gt;Steps&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;If you&amp;rsquo;re using the Banjo Brothers frame pack, you&amp;rsquo;ll need to cut a little hole in the front for the hose before installing it.
I also used a lighter to singe/seal the hole edges to prevent fraying.&lt;br /&gt;
&lt;img src=&#34;http://wittyginger.com/hydration/hole.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re using the quick link, install it so it fits in the frame pack. Here&amp;rsquo;s a picture of where I placed it in the line.
The image also shows the orientation of how the bladder sits in the pack.
&lt;img src=&#34;http://wittyginger.com/hydration/quick-link.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Install the frame pack.&lt;/li&gt;
&lt;li&gt;Fasten the badge holder onto the bars so the line is facing you as you&amp;rsquo;re riding. I used gorilla tape. Use whatever works.&lt;/li&gt;
&lt;li&gt;Route the tubing, and mount it to the badge holder like this.&lt;br /&gt;
&lt;img src=&#34;http://wittyginger.com/hydration/tube-holder.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Profit!  Well, actually cost you around $80.  But sure beats carrying water on your back or eating dirt.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Markdown Notes</title>
      <link>http://wittyginger.com/post/take-note/</link>
      <pubDate>Sun, 16 Jul 2017 20:09:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/take-note/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;tl;dr; markdown files + file syncing + built-in OS file searching = easy organized notes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been doing more devops work the last couple years,
which requires a broader and shallow level of knowledge vs. writing code in one or two languages for months at a time.&lt;/p&gt;

&lt;p&gt;Because of the dozens of tools I need to juggle, because I forget things, and because I forget things, keeping good notes is essential.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m surprised at how many programmers don&amp;rsquo;t keep any notes at all, so hopefully this will convince a couple people to invest a little in their flow.
Thanks to &lt;a href=&#34;http://naleid.com/&#34;&gt;Ted Naleid&lt;/a&gt; for showing me his workflow; it motivated me to properly organize my notes.&lt;/p&gt;

&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve used a few different combination of styles for keeping programming notes over the years:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;whatever notepads were available in the office supply cabinet&lt;/li&gt;
&lt;li&gt;moleskine notebook + space pen during my hipster Getting Things Done phase&lt;/li&gt;
&lt;li&gt;.txt files semi-randomly organized on my computer&lt;/li&gt;
&lt;li&gt;various notes programs like OneNote, Evernote, and Google Keep
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve never been content with any of them.  None of them had all these features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy&lt;/li&gt;
&lt;li&gt;fast&lt;/li&gt;
&lt;li&gt;copy/pasteable&lt;/li&gt;
&lt;li&gt;reliable&lt;/li&gt;
&lt;li&gt;flexible&lt;/li&gt;
&lt;li&gt;durable&lt;/li&gt;
&lt;li&gt;portable
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s what works for me:&lt;/p&gt;

&lt;h1 id=&#34;step-1-choose-your-file-format&#34;&gt;Step 1 - Choose Your File Format&lt;/h1&gt;

&lt;p&gt;I use markdown.  I would suggest that unless you really like some competing but similarly simple format.&lt;br /&gt;
Don&amp;rsquo;t use a binary format.&lt;br /&gt;
Don&amp;rsquo;t use HTML.&lt;br /&gt;
Don&amp;rsquo;t use a format that will be hard to programmatically convert from ten years from now when it becomes obsolete.&lt;/p&gt;

&lt;h1 id=&#34;step-2-choose-your-file-syncing-tool&#34;&gt;Step 2 - Choose Your File Syncing Tool&lt;/h1&gt;

&lt;p&gt;I use dropbox, and keep my notes in &lt;code&gt;/Dropbox/code/notes&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;step-3-organization&#34;&gt;Step 3 - Organization&lt;/h1&gt;

&lt;p&gt;Now it&amp;rsquo;s just a matter of creating your files and filling them up as you go along.&lt;br /&gt;
I have a file per tool or concept, and keep project-specific notes in their folder. e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  notes tree
.
├── cassandra.md
├── consul.md
├── curl.md
├── docker.md
├── drone.md
...
├── linux-debugging.md
...
├── weatherbane
    ├── weatherbane-notes.md
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-4-workflow-notes&#34;&gt;Step 4 - Workflow Notes&lt;/h1&gt;

&lt;p&gt;I can usually remember the name of the file I want to open, and that&amp;rsquo;s how I usually access the files.
e.g. with Alfred on OS X, where Cmd-Space is the hotkey to bring up the search box:&lt;br /&gt;
&lt;em&gt;Cmd-Space&lt;/em&gt; &lt;code&gt;open postg&lt;/code&gt; and then the tool will autocomplete to postgres.md, and I&amp;rsquo;ll hit enter to open the file in my favorite text editor.&lt;/p&gt;

&lt;p&gt;On my Android phone, I use JotterPad to view and (rarely) edit notes.&lt;/p&gt;

&lt;h1 id=&#34;more-ideas&#34;&gt;More Ideas&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/archlinux/comments/3a0ibj/notetaking_and_markdown/&#34;&gt;https://www.reddit.com/r/archlinux/comments/3a0ibj/notetaking_and_markdown/&lt;/a&gt;
&lt;a href=&#34;http://lifehacker.com/5943320/what-is-markdown-and-why-is-it-better-for-my-to-do-lists-and-notes&#34;&gt;http://lifehacker.com/5943320/what-is-markdown-and-why-is-it-better-for-my-to-do-lists-and-notes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>curl saves the day</title>
      <link>http://wittyginger.com/post/curl-saves-the-day/</link>
      <pubDate>Sat, 15 Jul 2017 13:09:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/curl-saves-the-day/</guid>
      <description>

&lt;p&gt;Every developer should be comfortable with &lt;a href=&#34;https://curl.haxx.se&#34;&gt;curl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the same reason that you should at least be conversational in tools like sed, awk, and vi, you should be able to quickly type in something like
like &lt;code&gt;curl -v localhost:8080&lt;/code&gt; to see what&amp;rsquo;s going on.  It&amp;rsquo;s available on just about every unix-based box for a good reason.&lt;/p&gt;

&lt;p&gt;Like its man page states, the number of features will make your head spin.  That&amp;rsquo;s probably the most discussed reason people are turned off by it.
You don&amp;rsquo;t have to understand all its features though; learn five of them and you&amp;rsquo;ll be able to quickly solve problems you couldn&amp;rsquo;t before.&lt;/p&gt;

&lt;p&gt;Memorize the basics, and keep notes of the more advanced problems you solve with it for the future.&lt;/p&gt;

&lt;h1 id=&#34;the-basics&#34;&gt;The Basics&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;GET something&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;curl https://jsonplaceholder.typicode.com/posts/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verbose output [-v]&lt;/strong&gt; (e.g. show response status, headers, etc..):&lt;br /&gt;
&lt;code&gt;curl -v https://jsonplaceholder.typicode.com/posts/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Allow insecure SSL connections [-k]&lt;/strong&gt; (useful for self-signed certs):&lt;br /&gt;
&lt;code&gt;curl -k https://untrusted-root.badssl.com/&lt;/code&gt; (try it without &lt;code&gt;-k&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a header [-H name: value]&lt;/strong&gt;:&lt;br /&gt;
&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; https://jsonplaceholder.typicode.com/posts/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;POST a file [-X POST and -d @file-path]&lt;/strong&gt;:&lt;br /&gt;
&lt;code&gt;curl -X POST -d @/tmp/foo.json https://jsonplaceholder.typicode.com/posts/1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;more-advanced-usage&#34;&gt;More Advanced Usage&lt;/h1&gt;

&lt;p&gt;If you leave with nothing but the knowledge of what&amp;rsquo;s above, you&amp;rsquo;ll be in great shape.
You&amp;rsquo;ll be able to quickly solve situations with minimal effort and tooling.  But keep reading to get a glimpse of advanced features.&lt;/p&gt;

&lt;p&gt;Below are examples of commands I keep in my /notes/curl.md file.&lt;/p&gt;

&lt;h3 id=&#34;get-a-service-100-times-and-get-a-count-of-the-response-codes-returned&#34;&gt;Get a service 100 times, and get a count of the response codes returned&lt;/h3&gt;

&lt;p&gt;This is really handy when you have a service that is misbehaving, and you want to get a quick idea of how it&amp;rsquo;s responding beyond a single request.
For example, you might find that 25% of requests fail, then discover that &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; of your servers are misconfigured.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL -w &amp;quot;%{http_code}\\n&amp;quot; -o /dev/null &amp;quot;https://foo.com/?[1-100]&amp;quot; | sort | uniq -c
     23 200
     77 503
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explanation of the arguments:&lt;br /&gt;
&lt;code&gt;-s&lt;/code&gt;: silent/quiet mode.  don&amp;rsquo;t show progress meter or error messages.&lt;br /&gt;
&lt;code&gt;-L&lt;/code&gt;: follow redirects&lt;br /&gt;
&lt;code&gt;-w &amp;quot;%{http_code}\\n&amp;quot;&lt;/code&gt;: make curl write out the http code of the response, followed by a new line&lt;br /&gt;
&lt;code&gt;-o /dev/null&lt;/code&gt;: write the response to a file (in this /dev/null, meaning we don&amp;rsquo;t care)&lt;br /&gt;
&lt;code&gt;?[1-100]&lt;/code&gt;: [] is a range specifier.  In this case, execute a request for every value in the range.  e.g. foo.com?1, foo.com?2, etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;Then we pipe the response code output to &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;uniq -c&lt;/code&gt;, which gives us a count of each response code.
From the above sample output, there were 23 responses with a 200 response code, and 77 responses with a 503 response code.  Not good!&lt;/p&gt;

&lt;p&gt;Also note that the URL in this example is quoted.  This enables us to use special characters like the &lt;code&gt;?&lt;/code&gt; query parameter without having to escape them.&lt;/p&gt;

&lt;p&gt;Similar to the range specifier is the sequence operator, e.g. &lt;code&gt;{a, b}&lt;/code&gt;.&lt;br /&gt;
e.g. Type one curl command, but have it use a few different argument values, or have it hit each of your servers individually.&lt;/p&gt;

&lt;h3 id=&#34;get-response-time&#34;&gt;Get response time&lt;/h3&gt;

&lt;p&gt;Similar to the above example, but just returns the total response time in seconds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL -w &amp;quot;%{time_total}\\n&amp;quot; -o /dev/null &amp;quot;https://jsonplaceholder.typicode.com/posts/1&amp;quot;

1.412
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;measure-network-performance-for-the-request-segments&#34;&gt;Measure network performance for the request segments&lt;/h3&gt;

&lt;p&gt;The following example is really useful when want to quickly see where your request is taking its time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL -w &#39;   namelookup: %{time_namelookup}\n      connect: %{time_connect}\n   appconnect: %{time_appconnect}\n  pretransfer: %{time_pretransfer}\n     redirect: %{time_redirect}\nstarttransfer: %{time_starttransfer}\n        total: %{time_total}\n\n&#39; -o /dev/null &amp;quot;https://jsonplaceholder.typicode.com/posts/1&amp;quot;

   namelookup: 0.071
      connect: 0.109
   appconnect: 0.349
  pretransfer: 0.349
     redirect: 0.000
starttransfer: 0.379
        total: 0.379
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;a-case-of-curl-saving-my-bacon&#34;&gt;A case of curl saving my bacon&lt;/h1&gt;

&lt;p&gt;Recently our team deployed a new mobile app, to a new company warehouse, using a new network provider, in a new server infrastructure.&lt;br /&gt;
The users reported occasional slow response times in the application. ugh - so many variables.&lt;br /&gt;
Our server API stats were all consistently fast.  Load testing our services showed adequate performance, both from the warehouse and from headquarters.
What also made this difficult was that during the alpha testing, initial actual usage was so low that our initial performance metrics didn&amp;rsquo;t show any patterns.&lt;/p&gt;

&lt;p&gt;Given that we couldn&amp;rsquo;t reproduce the issue internally, but could see it was only happening in the warehouse on the warehouse mobile device network, implied a network issue.
But the network support staff couldn&amp;rsquo;t find any issues, so we were stumped for a little while.&lt;/p&gt;

&lt;p&gt;I went to the warehouse to help support the rollout and used the above examples to eventually find the problem.&lt;br /&gt;
This was the first command that pointed me toward the real issue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;while true; do curl -sL -w &amp;quot;%{time_total}\\n&amp;quot; -o /dev/null &#39;https://oursite.com/health&#39;; sleep 5; done
0.293
0.298
0.426
0.292
0.833
5.823
0.283
0.296
0.296
0.293
0.295
0.553
0.294
0.817
0.289
0.295
0.300
5.828
0.364
0.300
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice any pattern?  Every minute we got a slow response!  That smells like a lookup or a caching issue.
So I issued this command to measure network segment performance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL -w &#39;   namelookup: %{time_namelookup}\n      connect: %{time_connect}\n   appconnect: %{time_appconnect}\n  pretransfer: %{time_pretransfer}\n     redirect: %{time_redirect}\nstarttransfer: %{time_starttransfer}\n        total: %{time_total}\n\n&#39; -o /dev/null &amp;quot;https://oursite.com/health&amp;quot;
   namelookup: 5.543
      connect: 5.588
   appconnect: 5.770
  pretransfer: 5.770
     redirect: 0.000
starttransfer: 5.823
        total: 5.823
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;namelookup&lt;/code&gt; indicates the amount of time it took to do a DNS name lookup.  i.e. The primary DNS server configured for the device was failing to find the server.
The backup server &lt;em&gt;was&lt;/em&gt; working though.  The device cached the IP address of the server for a minute, and when the cache expired, the process repeated itself.
Boom!  Using a different DNS server while we fixed the underlying DNS issue solved the problem.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;curl&amp;rsquo;s basic and most common features are easy to use and memorize&lt;/li&gt;
&lt;li&gt;it has a huge feature list&lt;/li&gt;
&lt;li&gt;it will almost always be available on the *nix server you&amp;rsquo;re shelled in to&lt;/li&gt;
&lt;li&gt;it integrates beautifully with other shell commands to build up your desired solution&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;curl has dozens of arguments for its features, and it&amp;rsquo;s easy to get lost in its man pages, but it&amp;rsquo;s good stuff.
And since curl is available on just about every system I use, it&amp;rsquo;s been worth the small investment of time for me.
Here&amp;rsquo;s the official page for its &lt;a href=&#34;https://ec.haxx.se/cmdline-options.html&#34;&gt;command line options&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy is still better than Java</title>
      <link>http://wittyginger.com/post/groovy-is-still-better-than-java/</link>
      <pubDate>Wed, 25 Jan 2017 01:20:43 -0600</pubDate>
      
      <guid>http://wittyginger.com/post/groovy-is-still-better-than-java/</guid>
      <description>

&lt;p&gt;The idea for this post started last week when a gifted teammate, whose experience lies outside JVM languages, asked me if it was still worth it to write Groovy over Java.  Good question&amp;hellip;&lt;/p&gt;

&lt;p&gt;For the last five years, when it comes to writing for the JVM, it&amp;rsquo;s been mostly Groovy for me.&lt;br /&gt;
Crap, it&amp;rsquo;s been almost ten years.  &lt;em&gt;dan feels his bones creaking&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I first saw Venkat Subramaniam gliding through his beautiful java to groovy idioms at a conference, I was impressed.&lt;/p&gt;

&lt;p&gt;Little things were nice, like being able to use &lt;code&gt;println &#39;hello&#39;&lt;/code&gt; instead of &lt;code&gt;System.out.println(&amp;quot;hello&amp;quot;);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Even better was reading a file line by line.  It went from this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BufferedReader br = new BufferedReader(new FileReader(&amp;quot;file.txt&amp;quot;));
try {
    StringBuilder sb = new StringBuilder();
    String line = br.readLine();

    while (line != null) {
        sb.append(line);
        sb.append(System.lineSeparator());
        line = br.readLine();
        System.out.println(&amp;quot;line = &amp;quot; + line);
    }
} finally {
    if (br != null) {
        br.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new File(&amp;quot;file.txt&amp;quot;).eachLine { println &amp;quot;line = $it&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Look Ma, a one-liner!&lt;/em&gt; That got me hooked.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;biggest&lt;/strong&gt; thing though, which I&amp;rsquo;ve grown to appreciate even more over the years, is the &lt;a href=&#34;http://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/Collection.html&#34;&gt;Collection&lt;/a&gt; interface. The intrinsic power it gives to collection-like objects is immense.  And hey, c&amp;rsquo;mon over here &lt;a href=&#34;http://groovy-lang.org/groovy-dev-kit.html#_iterating_on_maps&#34;&gt;Map&lt;/a&gt; - you&amp;rsquo;re iterable too as far as we&amp;rsquo;re concerned.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s basic stuff like &lt;code&gt;10.times { println it }&lt;/code&gt;, and
&lt;code&gt;someCollection.each { println it }&lt;/code&gt;, which shaves a few lines of code from the existing java iteration techniques.&lt;/p&gt;

&lt;p&gt;Then there&amp;rsquo;s commonly useful but more powerful improvements like &lt;code&gt;collect()&lt;/code&gt;, where you iterate through a collection of things, creating a new collection based on a function. e.g. going from this pre-Java 8 code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt; input = Arrays.asList(1, 2, 3);
List results = new ArrayList();
for (Iterator&amp;lt;Integer&amp;gt; iterator = input.iterator(); iterator.hasNext(); ) {
    Integer integer = iterator.next();
    results.add(integer * 2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List results = [1, 2, 3].collect { it * 2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Filtering a collection is a similar improvement, where you start with a collection and filter it down based on a condition applied to each element.  e.g. going from (once again, pre-Java 8):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt; input = Arrays.asList(1, 2, 3, 4);
List evenNumbers = new ArrayList();
for (Iterator&amp;lt;Integer&amp;gt; iterator = input.iterator(); iterator.hasNext(); ) {
    Integer integer = iterator.next();
    if (integer % 2 == 0) {
       evenNumbers.add(integer);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List evenNumbers = [1, 2, 3, 4].findAll { it % 2 == 0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It gets even more concise and powerful with methods like &lt;code&gt;collectMany&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt;.  They&amp;rsquo;re slightly more complicated, but worth the couple minutes of time it takes to understand.  If I were to give one piece of advice to people new to Groovy, it would be to thoroughly explore that interface.&lt;/p&gt;

&lt;p&gt;Lispers may smugly remark, &amp;ldquo;oh, how cute; you&amp;rsquo;re learning functional programming&amp;rdquo;.  And they&amp;rsquo;re right!
The pragmatic functional features of Groovy provide a gentle transition from object-oriented to more pure functional programming for many developers.&lt;/p&gt;

&lt;p&gt;Fast-forward a bunch of years, and things have changed. Even though Java hasn&amp;rsquo;t been progressing as fast as many would like, they&amp;rsquo;ve made some significant changes to include features introduced by Groovy, and pioneered by other languages; most notably lambdas and streaming.  For example, the above Java examples can now be written like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// read each line in a file
try (Stream&amp;lt;String&amp;gt; stream = Files.lines(Paths.get(&amp;quot;file.txt&amp;quot;))) {
    stream.forEach(System.out::println);
} catch (IOException e) {
    e.printStackTrace();
}

// collect
List&amp;lt;Integer&amp;gt; results = Stream.of(1, 2, 3).map(v -&amp;gt; v * 2).collect(Collectors.toList());  

// filter
List&amp;lt;Integer&amp;gt; evenNumbers = Stream.of(1, 2, 3, 4).filter(v -&amp;gt; v % 2 == 0).collect(Collectors.toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;&lt;strong&gt;much&lt;/strong&gt; improved over the old Java syntax. Still not as concise or elegant as Groovy, but fairly close.&lt;/p&gt;

&lt;h3 id=&#34;back-to-the-original-question&#34;&gt;Back to the original question&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Is it still worth it to write groovy? Fortunately, I had a chance to make a direct comparison that same week.&lt;/p&gt;

&lt;p&gt;It started with a little bake-off we&amp;rsquo;re doing to compare a couple different application design techniques.  I wrote a small service in plain groovy, and my teammate wrote one in java.  Our apps are running in a container that will have their environment-specific overrides specified as environment variables.  I strongly prefer typed configuration objects in the code, rather than things like generic Maps or JSON objects.  Ten minutes of googling, and I couldn&amp;rsquo;t find a utility to let me override typed configuration object values with environment variables.  So I created this project in groovy: &lt;a href=&#34;https://github.com/dtanner/env-config-loader-groovy&#34;&gt;https://github.com/dtanner/env-config-loader-groovy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My teammate initially used the &lt;a href=&#34;https://github.com/typesafehub/config&#34;&gt;typesafe/config&lt;/a&gt; project to do his configuration overrides.  But its environment overrides are a little verbose IMO, we didn&amp;rsquo;t need its additional complexity, and solving the same problem with different tools adds to the maintenance costs for the team.
So I created a pure java version of the env-config-loader tool as well: &lt;a href=&#34;https://github.com/dtanner/env-override&#34;&gt;https://github.com/dtanner/env-override&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t excited about writing the java version, but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A pure java implementation can be used by other JVM languages&lt;/li&gt;
&lt;li&gt;It seemed like a useful tool for the community&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d be able to have a current and relevant opinion on Groovy&amp;rsquo;s usefulness compared to Java&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example line in the Groovy code is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map&amp;lt;String, String&amp;gt; envOverridesMap = getenv().findAll { it.key.startsWith(environmentPrefix) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above line populates a Map from all system environment variables that match a given environment prefix.  I wanted to avoid dependencies if possible to limit the transitive dependencies needed by consumers of the library; the only compile dependency is logback-classic.&lt;/p&gt;

&lt;p&gt;On the java side, I also tried building the tool without any dependencies, but it got ugly pretty fast.  Replicating the above Groovy wasn&amp;rsquo;t too bad; you&amp;rsquo;ve basically seen what it looks like in the earlier collect example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map&amp;lt;String, String&amp;gt; envOverridesMap = new HashMap&amp;lt;&amp;gt;();
for (String envKey : envVars.keySet()) {
    if (envKey.startsWith(environmentPrefix)) {
        envOverridesMap.put(envKey, envVars.get(envKey));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isn&amp;rsquo;t there a more concise way?  IntelliJ suggested this alternative syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map&amp;lt;String, String&amp;gt; envOverridesMap = new HashMap&amp;lt;&amp;gt;();
envVars.keySet().stream().filter(envKey -&amp;gt; 
    envKey.startsWith(environmentPrefix)).forEach(envKey -&amp;gt; 
        envOverridesMap.put(envKey, envVars.get(envKey)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;but that just made me sad.  I enjoy the new streaming capabilities, but it didn&amp;rsquo;t add value in for me in this case.  It could&amp;rsquo;ve been much cleaner if Map were iterable in java, but it&amp;rsquo;s not and probably won&amp;rsquo;t ever be.&lt;/p&gt;

&lt;p&gt;Things got ugly when I tried cloning an arbitrary object, and also dynamically setting properties on an object.  In Java &lt;code&gt;clone()&lt;/code&gt; is a protected method, so you can&amp;rsquo;t call it unless you extend from that object.  I tried to hack something together like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static &amp;lt;T&amp;gt; T cloneObject(T obj) {
    try {
        T clone = (T) obj.getClass().newInstance();
        for (Field field : obj.getClass().getDeclaredFields()) {
            if (Modifier.isFinal(field.getModifiers())) {
                continue;
            }
            field.setAccessible(true);
            field.set(clone, field.get(obj));
        }
        return clone;
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but there were exceptional cases I hadn&amp;rsquo;t handled yet, so eventually gave up and added the commons BeanUtils library so I could use the &lt;code&gt;cloneBean()&lt;/code&gt; method.  Even uglier was going down the path of dynamic property value overrides.  I had started to toy with this monstrosity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static boolean setProperty(Object object, String fieldName, String fieldValueString) {
    Class&amp;lt;?&amp;gt; clazz = object.getClass();
    try {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        Class fieldType = field.getType();
            if (fieldType.equals(Integer.class) || fieldType.equals(Integer.TYPE)) {
                field.setInt(object, Integer.parseInt(fieldValueString));
            } else if (fieldType.equals(Long.class) || fieldType.equals(Long.TYPE)) {
                field.setLong(object, Long.parseLong(fieldValueString));
            } else if (fieldType.equals(Boolean.class) || fieldType.equals(Boolean.TYPE)) {
                field.setBoolean(object, Boolean.parseBoolean(fieldValueString));
            } else if (fieldType.equals(Long.class) || fieldType.equals(Long.TYPE)) {
                field.set(object, Long.parseLong(fieldValueString));
            } else {
                Class.forName(field.getDeclaringClass().getName());
                field.getDeclaringClass().getConstructor(String.class).newInstance(fieldValueString);
                field.set(object, field.getType().getConstructor(String.class).newInstance(fieldValueString));
            }
        return true;
    } catch (NoSuchFieldException e) {
        log.warn(&amp;quot;Environment override for property &amp;quot; + fieldName + &amp;quot; found, but no matching property exists.&amp;quot;);
    } catch (Exception e) {
        throw new IllegalStateException(e);
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;before punting.  Since I had already accepted the BeanUtils dependency, I was able to use the &lt;code&gt;copyProperty&lt;/code&gt; method and delete a lot of potentially brittle code.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;You probably enjoyed reading the java code as much as I enjoyed writing it.  It&amp;rsquo;s not the semicolons or the verbose exception handling.  It was that I could do in a single line of Groovy what took an entire method in the equivalent Java.  This is a big deal in terms of productivity, maintenance, and code quality.&lt;/p&gt;

&lt;p&gt;There are other advantages to using Groovy, for example listed by Peter Ledbrook &lt;a href=&#34;http://blog.cacoethes.co.uk/groovyandgrails/groovy-in-light-of-java-8&#34;&gt;here&lt;/a&gt;.
As to the question of when it&amp;rsquo;s appropriate to write Java over Groovy, there&amp;rsquo;s really only a couple reasons in my opinion:&lt;/p&gt;

&lt;p&gt;The first is the reason I just insulted the java code I wrote, but still intend to promote and deprecate the groovy version; it&amp;rsquo;s a library that can be run on any JVM language.  The Groovy library is limited to Groovy usage.  It&amp;rsquo;s worth it for that situation.&lt;/p&gt;

&lt;p&gt;The second is if you&amp;rsquo;re using a framework or library that doesn&amp;rsquo;t let you easily use Groovy.  If you&amp;rsquo;re going down this path, I think you&amp;rsquo;ll know it when you see it.  e.g. If you want to write a lot of RxJava, you might want to stick with Java, at least for now.&lt;/p&gt;

&lt;p&gt;tl;dr; I still think Groovy is still generally a better Java.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>java.time for the extremely impatient</title>
      <link>http://wittyginger.com/post/javatime-for-impatient/</link>
      <pubDate>Wed, 13 Apr 2016 02:26:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/javatime-for-impatient/</guid>
      <description>

&lt;p&gt;This is a super quick history and primer for those familiar with java, but unfamiliar with &lt;a href=&#34;http://www.joda.org/joda-time/&#34;&gt;Joda-Time&lt;/a&gt;.
Java’s original date and time handling had some issues that could make it cumbersome and error-prone to work with. Then came the Joda-Time library, which is a fantastic replacement for pretty much everything date and time related. It’s intuitive, clean, fully-featured, and performant.&lt;/p&gt;

&lt;p&gt;Starting with Java 8, the library was folded into the core JDK, with very few modifications to the Joda API.&lt;/p&gt;

&lt;p&gt;In short, if you’re not on Java 8 yet, you should probably be using the joda-time library. If you are on Java 8, you should use the java.time classes.&lt;/p&gt;

&lt;p&gt;There’s much more to the package than what I’ll show, and you’ll eventually want to dive deeper, but this article shows you some of the most frequently used techniques I’ve experienced on the last few projects. I’m using groovy for the code snippets, but they’re just java without the semicolons.&lt;/p&gt;

&lt;h4 id=&#34;91-83-of-the-time-you-ll-work-with-localdate-or-zoneddatetime&#34;&gt;91.83% of the time, you’ll work with LocalDate or ZonedDateTime.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;import java.time.LocalDate
import java.time.ZonedDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.time.temporal.TemporalAdjusters

// If you have a date without time information, use a LocalDate. e.g. someone&#39;s birthday
LocalDate localDate = new LocalDate(2016, 4, 12)
println localDate.toString()  // 2016-04-12

// If you need to include time in the date, use ZonedDateTime
ZonedDateTime zdt = ZonedDateTime.now() 

// when formatting a ZonedDateTime for API communication, you&#39;ll typically use the DateTimeFormatter.ISO_INSTANT format
println zdt.format(DateTimeFormatter.ISO_INSTANT)
// 2016-04-12T19:20:45.539Z

// some more examples of formatters
println zdt.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
// 2016-04-12T14:20:45.539

println zdt.format(DateTimeFormatter.RFC_1123_DATE_TIME)
// Tue, 12 Apr 2016 14:20:45 -0500

println zdt.format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
// 2016-04-12T14:20:45.539-05:00[America/Chicago]

// you can also create a custom formatter
DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&amp;quot;MMM dd yyyy GG&amp;quot;)
println zdt.format(formatter)
// Apr 12 2016 AD
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;date-manipulation-is-fluent-and-intuitive&#34;&gt;Date manipulation is fluent and intuitive.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;import java.time.LocalDate
import java.time.temporal.TemporalAdjusters

LocalDate localDate = LocalDate.now()
println localDate 
// 2016-04-12

println localDate.plusMonths(1).withDayOfMonth(1)
// 2016-05-01

println localDate.minusMonths(1).with(TemporalAdjusters.lastDayOfMonth())
// 2016-03-31
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;prefer-to-work-in-utc-if-you-can-logs-database-timestamps-consistency-helps-avoid-mistakes&#34;&gt;Prefer to work in UTC if you can - logs, database timestamps…consistency helps avoid mistakes.&lt;/h4&gt;

&lt;p&gt;In a startup class: &lt;code&gt;TimeZone.setDefault(TimeZone.getTimeZone(&amp;quot;UTC&amp;quot;))&lt;/code&gt;&lt;br /&gt;
or as a JVM flag: &lt;code&gt;-Duser.timezone=UTC&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;when-working-with-a-point-in-time-always-be-aware-of-timezone&#34;&gt;When working with a point in time, always be aware of timezone!!!!&lt;/h4&gt;

&lt;p&gt;Even when working with objects like LocalDate, you must be timezone aware if you’re using a point-in-time operation. And by point-in-time, 99.273% of the time I’m referring to the now() method.
For example, given the following scenario:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The default JVM timezone is &lt;code&gt;UTC&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;At &lt;code&gt;2016-04-12 3:10 PM&lt;/code&gt; in &lt;code&gt;America/Chicago&lt;/code&gt; (which is GMT-6), a call to println &lt;code&gt;LocalDate.now()&lt;/code&gt; will result in &lt;code&gt;2016-04-12&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But at &lt;code&gt;2016-04-12 6:10 PM&lt;/code&gt; in &lt;code&gt;America/Chicago&lt;/code&gt;, the same call will result in &lt;code&gt;2016-04-13&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re in Chicago, that looks like tomorrow, and might be a bug for what you’re trying to do! The code is doing precisely what it’s told though; the date in London is April 13th at the time the LocalDate is created for the UTC timezone.&lt;/p&gt;

&lt;p&gt;So to repeat, when working with specific points in time, be aware of the timezone you’re working with. For example, if you want to set a date 30 days out from now according to your business location, you could say &lt;code&gt;LocalDate.now(ZoneId.of(&#39;America/Chicago&#39;)).plusDays(30)&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&#34;&gt;java.time javadocs&lt;/a&gt; are actually really good, so read them for more detailed information. Wrapping up the whirlwind tour, here’s a quick table to help get you started with a few objects and their example uses:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Example Usage and Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LocalDate&lt;/td&gt;
&lt;td&gt;Birthday, Contract date where no time or timezone is needed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ZonedDateTime&lt;/td&gt;
&lt;td&gt;Most points in time, like some startDateTime, endDateTime&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;YearMonth&lt;/td&gt;
&lt;td&gt;When you only want to work with a year/month combination. Less commonly used, but handy for date comparisons if you don’t want granularity to the day. e.g. Credit Card Expiration Month&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LocalTime&lt;/td&gt;
&lt;td&gt;e.g. Chris’s hardware store opens at 8 am. This date is irrespective of timezone (i.e. you wouldn’t change the opening time when daylight savings rolls around.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Dynamic Grails Tomcat datasource configuration with Etcd</title>
      <link>http://wittyginger.com/post/dynamic-grails-tomcat-datasource/</link>
      <pubDate>Thu, 30 Apr 2015 06:05:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/dynamic-grails-tomcat-datasource/</guid>
      <description>

&lt;p&gt;Ever wonder if you could modify a Grails datasource while the app is running?
Probably not, and that&amp;rsquo;s totally fine&amp;hellip;most people don&amp;rsquo;t need to. We had a couple reasons though:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;During a disaster recovery situation where a non-clustered database goes down, you want to point all the apps at a failover database.  By default this means you have to update the config and restart all the apps.  On a typical AWS instance, this means at least a minute of downtime for a bigger Grails app.  Not the end of the world, but not great.&lt;/li&gt;
&lt;li&gt;One of our databases is a catalog of product information that can be drastically changed.  We wanted to be able to clone the catalog, apply massive data changes to it (this can take a minute or so), and then point all the apps in the cluster to this new database without downtime.  And we also want to be able to revert to the old database if something goes wrong.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;first-question-how-can-you-change-a-tomcat-datasource-while-the-app-is-running&#34;&gt;First question - how can you change a Tomcat datasource while the app is running?&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package com.foo.util

import groovy.util.logging.Log4j
import org.apache.tomcat.jdbc.pool.ConnectionPool
import org.codehaus.groovy.grails.commons.GrailsApplication

@Log4j
class TomcatDatasourceUtil {

    static void ensureCurrentDatasources(GrailsApplication application, List datasourceNames) {
        log.debug &amp;quot;Ensuring datasources are current&amp;quot;
        datasourceNames.each { String datasourceName -&amp;gt;
            ConnectionPool connectionPool = application.mainContext.getBean(datasourceName).targetDataSource.targetDataSource.pool

            def dataSourceFileConfig = application.config.&amp;quot;$datasourceName&amp;quot;

            // discover the properties we want to potentially change. if changed, update and purge the pool
            List propertyNames = [&#39;url&#39;, &#39;username&#39;, &#39;password&#39;]
            if (propertyNames.any { String propertyName -&amp;gt;
                connectionPool.poolProperties.&amp;quot;${propertyName}&amp;quot; != dataSourceFileConfig.&amp;quot;${propertyName}&amp;quot;
            }) {
                connectionPool.poolProperties.url = dataSourceFileConfig.url
                connectionPool.poolProperties.username = dataSourceFileConfig.username
                connectionPool.poolProperties.password = dataSourceFileConfig.password
                connectionPool.purge()
                log.info(&amp;quot;${datasourceName} was modified and refreshed&amp;quot;)
            } else {
                log.info(&amp;quot;${datasourceName} didn&#39;t change&amp;quot;)
            }
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Grails version 2.3 and onwards uses the &lt;a href=&#34;https://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html&#34;&gt;Tomcat Connection Pool&lt;/a&gt; as its datasource provider by default.  If you&amp;rsquo;re not using Grails 2.3+ yet, you&amp;rsquo;re probably using the Apache Commons DBCP, and can switch by using &lt;a href=&#34;http://grails.org/plugin/jdbc-pool&#34;&gt;this plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, you pass the &lt;code&gt;ensureCurrentDatasources&lt;/code&gt; method your grailsApplication and a list of datasource names you want to inspect for changes and potentially refresh.  The datasource name(s) are typically defined in your DataSource.groovy.  e.g. If you only have one datasource, it&amp;rsquo;ll be named &amp;ldquo;dataSource&amp;rdquo;.  If you&amp;rsquo;re using multiple datasources, they might be named &amp;ldquo;dataSource_auditing&amp;rdquo; or whatever you&amp;rsquo;ve specified.&lt;/p&gt;

&lt;p&gt;The method is implemented to compare the current Tomcat connection pool values for the username, password, and url against the current Grails configuration values.  If any settings have changed, it&amp;rsquo;ll update those connection pool settings and call the purge() method in the connection pool.  purge() will basically perform a graceful reset of all the connections so that they establish their next connection with the updated configuration.  I chose username, password, and url because those are the things that we might change.  There are more properties in the pool that you could possibly change, but you probably don&amp;rsquo;t want to change much else, since there is some critical state being managed by some of the properties.&lt;/p&gt;

&lt;p&gt;OK, so you know a way to dynamically update a datasource while the app is running.&lt;/p&gt;

&lt;h4 id=&#34;next-question-how-should-i-wire-in-this-dynamic-update-capability&#34;&gt;Next question: How should I wire in this dynamic update capability?&lt;/h4&gt;

&lt;p&gt;The short answer is, whatever works best for you.  Here&amp;rsquo;s the path we went down&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The initial approach:&lt;/strong&gt;&lt;br /&gt;
Our application has the following attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It uses an inline plugin where we keep our domain classes and services.&lt;/li&gt;
&lt;li&gt;We use &lt;a href=&#34;https://saltstack.com/&#34;&gt;Salt&lt;/a&gt; to manage our external config files&lt;/li&gt;
&lt;li&gt;It uses the &lt;a href=&#34;https://github.com/bluesliverx/grails-external-config-reload&#34;&gt;External Config Reload&lt;/a&gt; plugin to allow us to dynamically update the app config when we change the config files.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With those attributes, we initially implemented a hook into the TomcatDatasourceUtil by defining the onConfigChange event in our plugin&amp;rsquo;s Config.groovy, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def onConfigChange = { event -&amp;gt;
    TomcatDatasourceUtil.ensureCurrentDatasources(
            application, 
            [&#39;dataSource&#39;, &#39;dataSource_auditing&#39;])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This worked fine, but seemed like a clunky solution.  For the catalog database update scenario, the application essentially needs to remotely communicate with salt, so that salt could remotely update all of the application&amp;rsquo;s configuration files.  We keep all our salt configurations in source control, which didn&amp;rsquo;t really fit the model of what we wanted to do.&lt;/p&gt;

&lt;h4 id=&#34;the-better-approach-or-at-least-this-has-been-working-well-for-us-so-far&#34;&gt;The better approach&amp;hellip;or at least this has been working well for us so far:&lt;/h4&gt;

&lt;p&gt;Rather than use a tool to constantly push out config file changes on the fly to our cluster of apps, we thought it would be better if we inverted the technique&amp;hellip;i.e. have all the applications get their configuration from a central location.  This is where &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;etcd&lt;/a&gt; comes in.  The summary of etcd is that it&amp;rsquo;s &amp;ldquo;a distributed, consistent key value store for shared configuration and service discovery with a focus on being simple, secure, fast, and reliable.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You can run just about any groovy code in your Config.groovy and Datasource.groovy.  So rather than have the application get its datasource config info from a file, we have it load the datasource URL from etcd.  e.g. Here&amp;rsquo;s a snippet from our external config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import groovy.json.JsonSlurper

dataSource {
    // most properties are directly set
    pooled = true
    // ...
    
    // the url is retrieved from etcd...make sure the etcd resource is properly protected
    def jsonSlurper = new JsonSlurper()
    def catalogUrlConfig = jsonSlurper.parseText(new URL(&amp;quot;http://etcdlocation:2379/v2/keys/dataSource/url&amp;quot;).text)
    url = catalogUrlConfig.node.value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will take care of your app getting its initial url value from etcd.  You can put whatever else in etcd that you want&amp;hellip;for our case we only need to dynamically change the url.&lt;/p&gt;

&lt;h4 id=&#34;so-now-how-do-you-update-the-datasource-for-a-cluster-of-applications&#34;&gt;So now how do you update the datasource for a cluster of applications?&lt;/h4&gt;

&lt;p&gt;In your application&amp;rsquo;s Bootstrap.groovy init, make a call to a class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.foo.config

import com.foog.util.TomcatDatasourceUtil
import grails.plugins.rest.client.RestBuilder
import groovy.json.JsonSlurper

/**
 * Application service to get and set values from a centralized remote configuration service.
 */
class RemoteConfigService {
    def grailsApplication

    public static final String CATALOG_DB_URL_KEY = &amp;quot;dataSource/url&amp;quot;
    protected static final int INITIAL_RETRY_TIMEOUT_SECS = 5

    /**
     * Runs a process to watch for configuration changes to the plancatalog datasource URL.
     * If the URL value changes, call the datasource utility to update the connections to point at the new database.
     */
    void watchForChanges() {
        if (!grailsApplication.config.remoteConfig.enabled) {
            log.info &amp;quot;remoteConfigBaseUrl not configured - will not watch for config changes&amp;quot;
            return
        }
        log.debug(&amp;quot;watching for changes&amp;quot;)

        Thread.startDaemon {
            int secondsToWait = INITIAL_RETRY_TIMEOUT_SECS
            while (true) {
                try {
                    String url = get(&amp;quot;${CATALOG_DB_URL_KEY}?wait=true&amp;quot;)
                    if (url) {
                        grailsApplication.config.dataSource_plancatalog.url = url
                        TomcatDatasourceUtil.ensureCurrentDatasources(grailsApplication, [&#39;dataSource_plancatalog&#39;])
                    }
                    secondsToWait = INITIAL_RETRY_TIMEOUT_SECS
                } catch (Exception e) {
                    log.warn(&amp;quot;Exception occurred while watching for config changes. Will wait ${secondsToWait} seconds and continue watching&amp;quot;, e)
                    Thread.sleep(1000 * secondsToWait)
                    // double the length of the time to wait before retrying, up to a maximum of 30 minutes
                    secondsToWait = [60 * 30, 2 * secondsToWait].min()
                }
            }
        }
    }

    /**
     * Get the configured value for the given key
     * @param key
     * @return the current value
     */
    String get(String key) {
        def jsonSlurper = new JsonSlurper()
        def json = jsonSlurper.parseText(new URL(&amp;quot;${grailsApplication.config.remoteConfig.baseUrl}/${key}&amp;quot;).text)
        return json?.node?.value
    }

    /**
     * Set the given key to the given value in the centralized configuration service
     * @param key
     * @param valueArg
     */
    void set(String key, String valueArg) {
        RestBuilder rest = new RestBuilder()
        def resp = rest.put(&amp;quot;${grailsApplication.config.remoteConfig.baseUrl}/${key}&amp;quot;) {
            value = valueArg
        }
        if (resp.status != 200) {
            throw new Exception(&amp;quot;Error setting configuration value for key=${key}. Response=${resp.body}&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very basic implementation of an etcd client that can watch for changes, update the grails configuration upon change, and also allow the app to update an etcd value.  There are more robust etcd clients available, but we didn&amp;rsquo;t need (at least not yet) the added dependencies and complexity.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s pretty fun to watch once you get it all working.  Essentially this is the flow:&lt;br /&gt;
1. A cluster of grails applications start up, configure their datasource URL using the etcd config, and watch for changes.&lt;br /&gt;
2. Some time later, one of the applications clones the database, makes changes to it, and then sets the new URL value in etcd.&lt;br /&gt;
3. All the applications are then notified of the updated etcd value and dynamically update their datasource to point at the new URL.&lt;br /&gt;
4. &amp;ldquo;dataSource was modified and refreshed&amp;rdquo;!&lt;/p&gt;

&lt;p&gt;Does this actually work?
Yup - extremely well.  I actually expected the initial implementation to be a little brittle (e.g. maybe needing a more robust etcd client), but it didn&amp;rsquo;t need any changes in the 6 months I watched it in production.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy collect vs spread-dot operator</title>
      <link>http://wittyginger.com/post/groovy-collect-vs-spread-dot-operator/</link>
      <pubDate>Sat, 15 Nov 2014 23:17:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/groovy-collect-vs-spread-dot-operator/</guid>
      <description>&lt;p&gt;Yesterday I was doing some Groovy code cleanup with the wonderful &lt;a href=&#34;http://codenarc.sourceforge.net/&#34;&gt;CodeNarc&lt;/a&gt; static analysis tool. One of the violations it found was &lt;a href=&#34;http://codenarc.sourceforge.net/codenarc-rules-unnecessary.html#UnnecessaryCollectCall&#34;&gt;UnnecessaryCollectCall&lt;/a&gt;.
The summary of the rule is &amp;ldquo;Some method calls to Object.collect(Closure) can be replaced with the spread operator.&amp;rdquo;
e.g. Replace things.collect { it.name } with things*.name, or even things.name if what you&amp;rsquo;re after is a property.&lt;/p&gt;

&lt;p&gt;But when I performed that refactoring and ran all the tests, some failed! Here&amp;rsquo;s why:&lt;/p&gt;

&lt;p&gt;I made the mistake of assuming that the spread operator behavior is always identical to the collect method. For a &lt;strong&gt;non-null&lt;/strong&gt; collection, it is. e.g. The following code will produce the same result regardless of the technique you use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def things = [ [a: 1], [a: 2] ]

things.collect { it.a } // returns [1, 2]
things*.a               // returns [1, 2]
things.a                // returns [1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if the collection you&amp;rsquo;re operating on is &lt;strong&gt;null&lt;/strong&gt;, the three techniques will result in different outcomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def things = null

things.collect { it.a }   // returns []
things*.a                 // returns null
things.a                  // throws a NullPointerException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this means is that if you&amp;rsquo;re working with Collections that can potentially be null, you need to think about the consequences of the dot operations before using them. i.e. Don&amp;rsquo;t ever use the implicit spread operator (things.a) if the collection can be null. And only use *. if it&amp;rsquo;s ok for the result to be null.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;tl;dr;&lt;/em&gt; Explicit and implicit spread operations are great, but be aware that they are less forgiving than the collect method.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Playhouse</title>
      <link>http://wittyginger.com/post/playhouse/</link>
      <pubDate>Sat, 16 Oct 2010 19:17:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/playhouse/</guid>
      <description>&lt;p&gt;A few months ago, I promised Maria that I would get her and Daniela a playhouse for their birthdays.  I was originally going to buy them a little Step2 playhouse, which would&amp;rsquo;ve been totally fine.  But my good friend Rob, a skilled woodworker, convinced me that building a playhouse was the way to go.  I was a little tentative about the idea, since I hadn&amp;rsquo;t built a real structure before on my own, but he very generously offered to help (and with two kids of his own, meant that his wife Karen also very generously helped&amp;hellip;we still can&amp;rsquo;t thank them enough!)&lt;/p&gt;

&lt;p&gt;So I bought this &lt;a href=&#34;http://wittyginger.com/playhouse/playhouse-small.pdf&#34;&gt;plan&lt;/a&gt; (which I can&amp;rsquo;t find any more, so am including it here), made a few modifications, and off we went:&lt;/p&gt;

&lt;p&gt;Starting with a pile of boards&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100828_IMG_3919.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and a friend who know&amp;rsquo;s what he&amp;rsquo;s doing&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100829_IMG_3929.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;things started to take shape, and a lot of space!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100829_IMG_3931.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We passed the initial kid inspection&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100829_IMG_3933.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and had lots of &amp;ldquo;help&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100829_IMG_3937.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first wall goes up&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100904_IMG_1129.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the playhouse is now fully operational.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100918_IMG_1257.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But we realized that it absolutely has to be red.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100918_IMG_3944.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Much better color!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100919_IMG_1305.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I finished up the railing in the dark with a million mosquito friends.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100920_IMG_1307.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One of the owner-operators.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/100929_DSC_4771.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Of course it needs a doorbell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/101003_IMG_1369.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and a solar-powered light for late night parties.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/101016_DSC_4783.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the trim, it&amp;rsquo;s pretty much done!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wittyginger.com/playhouse/101016_DSC_4780.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://wittyginger.com/playhouse/101016_DSC_4782.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Domain names for daughters</title>
      <link>http://wittyginger.com/post/domain-names-for-daughters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wittyginger.com/post/domain-names-for-daughters/</guid>
      <description>&lt;p&gt;Though the biggest domain name purchases are probably long-gone since the initial dot-com boom, they still remain a valued property. They&amp;rsquo;ll never be as valuable as real land of course, since we can always create more of them, as opposed to things like lake-front property.&lt;/p&gt;

&lt;p&gt;The recent mad rush for facebook profile names reminded me of this new global scale of gold rush activity. And yes, I&amp;rsquo;m a little annoyed that someone that has been farming this interweb as long as I have was offered a name like dan.tanner2 (in my day, we used Mosiac. And we liked it!). It also reminded me of something I&amp;rsquo;m hoping will come in handy for my two daughters some day - their very own short and memorable domain names.&lt;/p&gt;

&lt;p&gt;Finding a decent available domain name is a tenaciously difficult PITA. It&amp;rsquo;s an exercise in creativity and luck, and girls names are especially tough. Not only do you have to wrestle with the general lack of availability, but also the likelihood that they&amp;rsquo;ll change their name when they get married. In my case, that&amp;rsquo;s sometime after age 28, when they&amp;rsquo;ve agreed to start dating.&lt;/p&gt;

&lt;p&gt;In my case, my girls are named Maria Mae and Daniela Teresa. All good variants of maria and daniela were taken, which would&amp;rsquo;ve been ideal. And no last names were considered because of the potential marriage name change. After tinkering around for a while, here&amp;rsquo;s what I ended up saving for them:
mariamae.com and danielat.com
They&amp;rsquo;re both fairly mnemonic, and they&amp;rsquo;re both flexible enough to last. And they&amp;rsquo;re both shorter than my domain name!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;ll be a few years, but hopefully they&amp;rsquo;ll be useful. Not to mention give me a little boost in the cool dad category. Not that I&amp;rsquo;ll need any help in that category.&lt;/p&gt;

&lt;p&gt;Now&amp;hellip;where did my favorite plaid pants go?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>